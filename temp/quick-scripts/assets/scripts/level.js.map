{"version":3,"sources":["level.js"],"names":["TowerNodeState","Invalid","Null","BuildMenu","Tower","UpdateMenu","cc","Class","extends","Component","properties","enemyPathNodes","default","type","Node","towerPosNodes","buildTowerPrefab","Prefab","towerPrefab","updateTowerPrefab","enemyPrefab","onLoad","i","length","node","setState","setTouchEvent","global","event","on","buildTower","bind","updateTower","sellTower","gameStart","currentWaveCount","enemyCount","addEnemyTime","addWaveCurrentTime","enemyNodeList","EventType","TOUCH_START","log","target","name","state","showBuildMenu","showUpdateMenu","closeMenu","menu","instantiate","parent","position","destroy","data","tower","onDestory","off","getComponent","loader","loadRes","err","result","JSON","stringify","config","waves","wavesConfig","currentWaveConfig","addWave","addEnemy","enenmy","initWithData","push","update","dt","count","undefined","j","enemy","isLiving","setEnemy"],"mappings":"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","file":"level.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import global from '../global'\n\nconst TowerNodeState = {\n    Invalid : -1,\n    Null : 1,\n    BuildMenu : 2,\n    Tower : 3,\n    UpdateMenu : 4\n};\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        enemyPathNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        towerPosNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        buildTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        towerPrefab: {\n            default: [],\n            type : cc.Prefab\n        },\n\n        updateTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        enemyPrefab : {\n            default: null,\n            type : cc.Prefab\n        }\n    },\n\n    onLoad: function() {\n        for(let i=0; i < this.towerPosNodes.length; i++){\n            let node = this.towerPosNodes[i];\n            this.setState(node,TowerNodeState.Null);\n            this.setTouchEvent(node);\n        }\n\n        global.event.on(\"build_tower\",this.buildTower.bind(this));\n        global.event.on(\"update_tower\",this.updateTower.bind(this));\n        global.event.on(\"sell_tower\",this.sellTower.bind(this));\n        global.event.on(\"game_start\",this.gameStart.bind(this));\n\n        this.currentWaveCount = 0;\n        this.enemyCount = 0;\n        this.addEnemyTime = 0;\n        this.addWaveCurrentTime = 0;\n\n        this.enemyNodeList = [];\n    },\n\n    setTouchEvent: function(node){\n\n        node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            cc.log(\"touch node name == \" + event.target.name);\n\n            if(node.state == TowerNodeState.Null){\n                this.showBuildMenu(event.target);\n            }\n            else if(node.state == TowerNodeState.Tower){\n                this.showUpdateMenu(event.target);\n            }\n            \n        }, this);\n    },\n\n    showBuildMenu: function (node){\n\n        this.closeMenu();\n\n        if (node.state == TowerNodeState.Null) {\n            let menu = cc.instantiate(this.buildTowerPrefab);\n            menu.parent = this.node;\n            menu.position = node.position;\n            this.setState(node, TowerNodeState.BuildMenu);\n            node.menu = menu;\n        };\n    },\n\n    showUpdateMenu: function(node){\n        this.closeMenu();\n        let menu = cc.instantiate(this.updateTowerPrefab);\n        menu.parent = this.node;\n        menu.position = node.position;\n        this.setState(node, TowerNodeState.UpdateMenu);\n        node.menu = menu;\n\n    },\n\n    closeMenu: function (){\n        for (let i = 0; i < this.towerPosNodes.length ; i++){\n            let node = this.towerPosNodes[i];\n            if (node.state == TowerNodeState.BuildMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Null);\n                return node;\n            }\n            else if (node.state == TowerNodeState.UpdateMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Tower);\n                return node;\n            };\n        }\n    },\n\n    setState: function (node, state){\n        if(node.state == state){\n            return;\n        }\n\n        switch (state){\n            case TowerNodeState.Null:\n                break;\n            case TowerNodeState.BuildMenu:\n                break;\n            default:\n                break;\n        }\n        node.state = state;\n    },\n\n    buildTower: function(data){\n        cc.log(\"build tower \" + data);\n        let node = this.closeMenu();\n        let tower = cc.instantiate(this.towerPrefab[data]);\n        tower.parent = this.node;\n        tower.position = node.position;\n        this.setState(node,TowerNodeState.Tower);\n        node.tower = tower;\n\n    },\n\n    onDestory: function(){\n        global.event.off(\"build_tower\", this.buildTower);\n    },\n\n    updateTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").updateTower();\n    },\n\n    sellTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").sellTower();\n        this.setState(node,TowerNodeState.Null);\n    },\n\n    gameStart: function(){ \n        cc.loader.loadRes (\"./level_config\", (err, result) => {\n            if(err){\n                cc.log(\"load err = \" + err);\n            }else {\n                cc.log(\"load config = \", JSON.stringify(result));\n\n                let config = result[\"level_1\"];\n                let waves = config[\"waves\"];\n                this.config = config;\n                this.wavesConfig = waves;\n                this.currentWaveConfig = waves[this.currentWaveCount];\n            }\n        });\n    },\n\n    addWave: function() {\n\n    },\n\n    addEnemy: function (type){\n\n        cc.log (\"add type == \" + type);\n        let enenmy = cc.instantiate(this.enemyPrefab);\n        enenmy.getComponent(\"enemy\").initWithData(type, this.enemyPathNodes);\n        enenmy.parent = this.node;\n\n        this.enemyNodeList.push(enenmy);\n    },\n\n    update: function (dt){\n\n        if(this.currentWaveConfig){\n\n            if(this.addEnemyTime > this.currentWaveConfig.dt){\n\n                this.addEnemyTime = 0;\n                this.enemyCount ++;\n                this.addEnemy(this.currentWaveConfig.type);\n\n                if (this.enemyCount >= this.currentWaveConfig.count) {\n                    this.currentWaveConfig = undefined;\n                    this.enemyCount = 0;\n                }; \n            }\n            else {\n                this.addEnemyTime += dt;\n            }\n        }\n        else {\n            if (this.config) {\n                if (this.addWaveCurrentTime > this.config.dt) {\n\n                this.currentWaveConfig = this.wavesConfig[this.currentWaveCount];\n                if (this.currentWaveCount < this.wavesConfig.length ) {\n                    this.currentWaveCount ++;\n                }else {\n                    this.currentWaveConfig = undefined;\n                };\n\n                this.addWaveCurrentTime = 0;\n            }else{\n\n                this.addWaveCurrentTime += dt;\n            };\n            };\n\n            for(let i=0; i<this.towerPosNodes.length; i++){\n                let tower = this.towerPosNodes[i].tower;\n\n                if (tower) {\n\n                    for(let j=0; j < this.enemyNodeList.length; j++){\n                        let enemy = this.enemyNodeList[j];\n\n                        if (enemy.getComponent(\"enemy\").isLiving) {\n                            // let distance = cc.pDistance(tower);\n                            tower.getComponent(\"tower\").setEnemy(enemy);\n                        };\n                    }\n                };\n            }\n            \n        }\n    }\n\n});\n\n\n\n\n\n\n\n"]}