{"version":3,"sources":["level.js"],"names":["map_gen","require","TowerNodeState","Invalid","Null","BuildMenu","Tower","UpdateMenu","cc","Class","extends","Component","properties","map","type","default","towerPosNodes","Node","buildTowerPrefab","Prefab","towerPrefab","updateTowerPrefab","enemyPrefab","bulletPrefab","onLoad","i","length","node","setState","setTouchEvent","global","event","on","buildTower","bind","updateTower","sellTower","gameStart","addBullet","currentWaveCount","enemyCount","addEnemyTime","addWaveCurrentTime","enemyNodeList","start","road_set","get_road_set","enemyPathNodes","log","EventType","TOUCH_START","target","name","state","showBuildMenu","showUpdateMenu","closeMenu","menu","instantiate","parent","position","destroy","data","tower","onDestory","off","getComponent","undefined","loader","loadRes","err","result","JSON","stringify","config","waves","wavesConfig","currentWaveConfig","addWave","addEnemy","enenmy","initWithData","push","bullet","update","dt","count","j","enemy","isLiving","setEnemy","isDead","splice"],"mappings":"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","file":"level.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import global from \"./global\"\n\nvar map_gen = require(\"map_gen\");\n\nconst TowerNodeState = {\n    Invalid : -1,\n    Null : 1,\n    BuildMenu : 2,\n    Tower : 3,\n    UpdateMenu : 4\n};\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        map : {\n            type: map_gen,\n            default : null,\n        },\n\n        // enemyPathNodes: {\n        //     default : [],\n        //     type : cc.Node\n        // },\n\n        towerPosNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        buildTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        towerPrefab: {\n            default: [],\n            type : cc.Prefab\n        },\n\n        updateTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        enemyPrefab : {\n            default: null,\n            type : cc.Prefab\n        },\n\n        bulletPrefab : {\n            default: null,\n            type : cc.Prefab\n        }\n    },\n\n    onLoad: function() {\n\n        for(let i=0; i < this.towerPosNodes.length; i++){\n            let node = this.towerPosNodes[i];\n            this.setState(node,TowerNodeState.Null);\n            this.setTouchEvent(node);\n        }\n\n        global.event.on(\"build_tower\",this.buildTower.bind(this));\n        global.event.on(\"update_tower\",this.updateTower.bind(this));\n        global.event.on(\"sell_tower\",this.sellTower.bind(this));\n        global.event.on(\"game_start\",this.gameStart.bind(this));\n        global.event.on(\"addBullet\",this.addBullet.bind(this));\n\n        this.currentWaveCount = 0;\n        this.enemyCount = 0;\n        this.addEnemyTime = 0;\n        this.addWaveCurrentTime = 0;\n\n        this.enemyNodeList = [];\n    },\n\n    start () {\n        this.road_set = this.map.get_road_set();\n        this.enemyPathNodes = this.road_set[0];\n        cc.log(\"路径 == \" + this.enemyPathNodes);\n\n    },\n\n    setTouchEvent: function(node){\n\n        node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            cc.log(\"touch node name == \" + event.target.name);\n\n            if(node.state == TowerNodeState.Null){\n                this.showBuildMenu(event.target);\n            }\n            else if(node.state == TowerNodeState.Tower){\n                this.showUpdateMenu(event.target);\n            }\n            \n        }, this);\n    },\n\n    showBuildMenu: function (node){\n\n        this.closeMenu();\n\n        if (node.state == TowerNodeState.Null) {\n            let menu = cc.instantiate(this.buildTowerPrefab);\n            menu.parent = this.node;\n            menu.position = node.position;\n            this.setState(node, TowerNodeState.BuildMenu);\n            node.menu = menu;\n        };\n    },\n\n    showUpdateMenu: function(node){\n        this.closeMenu();\n        let menu = cc.instantiate(this.updateTowerPrefab);\n        menu.parent = this.node;\n        menu.position = node.position;\n        this.setState(node, TowerNodeState.UpdateMenu);\n        node.menu = menu;\n\n    },\n\n    closeMenu: function (){\n        for (let i = 0; i < this.towerPosNodes.length ; i++){\n            let node = this.towerPosNodes[i];\n            if (node.state == TowerNodeState.BuildMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Null);\n                return node;\n            }\n            else if (node.state == TowerNodeState.UpdateMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Tower);\n                return node;\n            };\n        }\n    },\n\n    setState: function (node, state){\n        if(node.state == state){\n            return;\n        }\n\n        switch (state){\n            case TowerNodeState.Null:\n                break;\n            case TowerNodeState.BuildMenu:\n                break;\n            default:\n                break;\n        }\n        node.state = state;\n    },\n\n    buildTower: function(data){\n        cc.log(\"build tower \" + data);\n        let node = this.closeMenu();\n        let tower = cc.instantiate(this.towerPrefab[data]);\n        tower.parent = this.node;\n        tower.position = node.position;\n        this.setState(node,TowerNodeState.Tower);\n        node.tower = tower;\n\n    },\n\n    onDestory: function(){\n        global.event.off(\"build_tower\", this.buildTower);\n    },\n\n    updateTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").updateTower();\n    },\n\n    sellTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").sellTower();\n        this.setState(node,TowerNodeState.Null);\n        node.tower = undefined;\n    },\n\n    gameStart: function(){ \n        cc.loader.loadRes (\"./level_config\", (err, result) => {\n            if(err){\n                cc.log(\"load err = \" + err);\n            }else {\n                cc.log(\"load config = \", JSON.stringify(result));\n\n                let config = result[\"level_1\"];\n                let waves = config[\"waves\"];\n                this.config = config;\n                this.wavesConfig = waves;\n                this.currentWaveConfig = waves[this.currentWaveCount];\n            }\n        });\n    },\n\n    addWave: function() {\n\n    },\n\n    addEnemy: function (type){\n\n        cc.log (\"add type == \" + type);\n        let enenmy = cc.instantiate(this.enemyPrefab);\n        enenmy.getComponent(\"enemy\").initWithData(type, this.enemyPathNodes);\n        enenmy.parent = this.node;\n\n        this.enemyNodeList.push(enenmy);\n    },\n\n    addBullet: function(tower, position) {\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.position = tower.position;\n        bullet.parent = this.node;\n        bullet.getComponent(\"bullet\").initWithData(tower, position, this.enemyNodeList);\n    },\n\n    update: function (dt){\n\n        if(this.currentWaveConfig){\n\n            if(this.addEnemyTime > this.currentWaveConfig.dt){\n\n                this.addEnemyTime = 0;\n                this.enemyCount ++;\n                this.addEnemy(this.currentWaveConfig.type);\n\n                if (this.enemyCount >= this.currentWaveConfig.count) {\n                    this.currentWaveConfig = undefined;\n                    this.enemyCount = 0;\n                }; \n            }\n            else {\n                this.addEnemyTime += dt;\n            }\n        }\n        else {\n            if (this.config) {\n                if (this.addWaveCurrentTime > this.config.dt) {\n\n                this.currentWaveConfig = this.wavesConfig[this.currentWaveCount];\n                if (this.currentWaveCount < this.wavesConfig.length ) {\n                    this.currentWaveCount ++;\n                }else {\n                    this.currentWaveConfig = undefined;\n                };\n\n                this.addWaveCurrentTime = 0;\n            }else{\n\n                this.addWaveCurrentTime += dt;\n            };\n            };\n\n            for(let i=0; i<this.towerPosNodes.length; i++){\n                let tower = this.towerPosNodes[i].tower;\n\n                if (tower != undefined) {\n\n                    for(let j=0; j < this.enemyNodeList.length; j++){\n                        var enemy = this.enemyNodeList[j];\n\n                        if (enemy.getComponent(\"enemy\").isLiving()) {\n                            tower.getComponent(\"tower\").setEnemy(enemy);\n                        }\n                        else if(enemy.getComponent(\"enemy\").isDead()){\n                            this.enemyNodeList.splice(j , 1);\n                            enemy.destroy();\n                        }\n                    }\n                };\n            }\n        }\n    }\n\n});\n\n\n\n\n\n\n\n"]}