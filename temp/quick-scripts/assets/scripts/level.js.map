{"version":3,"sources":["level.js"],"names":["TowerNodeState","Invalid","Null","BuildMenu","Tower","UpdateMenu","cc","Class","extends","Component","properties","enemyPathNodes","default","type","Node","towerPosNodes","buildTowerPrefab","Prefab","towerPrefab","updateTowerPrefab","enemyPrefab","bulletPrefab","onLoad","i","length","node","setState","setTouchEvent","global","event","on","buildTower","bind","updateTower","sellTower","gameStart","addBullet","currentWaveCount","enemyCount","addEnemyTime","addWaveCurrentTime","enemyNodeList","EventType","TOUCH_START","log","target","name","state","showBuildMenu","showUpdateMenu","closeMenu","menu","instantiate","parent","position","destroy","data","tower","onDestory","off","getComponent","undefined","loader","loadRes","err","result","JSON","stringify","config","waves","wavesConfig","currentWaveConfig","addWave","addEnemy","enenmy","initWithData","push","bullet","update","dt","count","j","enemy","isLiving","setEnemy"],"mappings":"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","file":"level.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import global from '../global'\n\nconst TowerNodeState = {\n    Invalid : -1,\n    Null : 1,\n    BuildMenu : 2,\n    Tower : 3,\n    UpdateMenu : 4\n};\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        enemyPathNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        towerPosNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        buildTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        towerPrefab: {\n            default: [],\n            type : cc.Prefab\n        },\n\n        updateTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        enemyPrefab : {\n            default: null,\n            type : cc.Prefab\n        },\n\n        bulletPrefab : {\n            default: null,\n            type : cc.Prefab\n        }\n    },\n\n    onLoad: function() {\n        for(let i=0; i < this.towerPosNodes.length; i++){\n            let node = this.towerPosNodes[i];\n            this.setState(node,TowerNodeState.Null);\n            this.setTouchEvent(node);\n        }\n\n        global.event.on(\"build_tower\",this.buildTower.bind(this));\n        global.event.on(\"update_tower\",this.updateTower.bind(this));\n        global.event.on(\"sell_tower\",this.sellTower.bind(this));\n        global.event.on(\"game_start\",this.gameStart.bind(this));\n        global.event.on(\"addBullet\",this.addBullet.bind(this));\n\n        this.currentWaveCount = 0;\n        this.enemyCount = 0;\n        this.addEnemyTime = 0;\n        this.addWaveCurrentTime = 0;\n\n        this.enemyNodeList = [];\n    },\n\n    setTouchEvent: function(node){\n\n        node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            cc.log(\"touch node name == \" + event.target.name);\n\n            if(node.state == TowerNodeState.Null){\n                this.showBuildMenu(event.target);\n            }\n            else if(node.state == TowerNodeState.Tower){\n                this.showUpdateMenu(event.target);\n            }\n            \n        }, this);\n    },\n\n    showBuildMenu: function (node){\n\n        this.closeMenu();\n\n        if (node.state == TowerNodeState.Null) {\n            let menu = cc.instantiate(this.buildTowerPrefab);\n            menu.parent = this.node;\n            menu.position = node.position;\n            this.setState(node, TowerNodeState.BuildMenu);\n            node.menu = menu;\n        };\n    },\n\n    showUpdateMenu: function(node){\n        this.closeMenu();\n        let menu = cc.instantiate(this.updateTowerPrefab);\n        menu.parent = this.node;\n        menu.position = node.position;\n        this.setState(node, TowerNodeState.UpdateMenu);\n        node.menu = menu;\n\n    },\n\n    closeMenu: function (){\n        for (let i = 0; i < this.towerPosNodes.length ; i++){\n            let node = this.towerPosNodes[i];\n            if (node.state == TowerNodeState.BuildMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Null);\n                return node;\n            }\n            else if (node.state == TowerNodeState.UpdateMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Tower);\n                return node;\n            };\n        }\n    },\n\n    setState: function (node, state){\n        if(node.state == state){\n            return;\n        }\n\n        switch (state){\n            case TowerNodeState.Null:\n                break;\n            case TowerNodeState.BuildMenu:\n                break;\n            default:\n                break;\n        }\n        node.state = state;\n    },\n\n    buildTower: function(data){\n        cc.log(\"build tower \" + data);\n        let node = this.closeMenu();\n        let tower = cc.instantiate(this.towerPrefab[data]);\n        tower.parent = this.node;\n        tower.position = node.position;\n        this.setState(node,TowerNodeState.Tower);\n        node.tower = tower;\n\n    },\n\n    onDestory: function(){\n        global.event.off(\"build_tower\", this.buildTower);\n    },\n\n    updateTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").updateTower();\n    },\n\n    sellTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").sellTower();\n        this.setState(node,TowerNodeState.Null);\n        node.tower = undefined;\n    },\n\n    gameStart: function(){ \n        cc.loader.loadRes (\"./level_config\", (err, result) => {\n            if(err){\n                cc.log(\"load err = \" + err);\n            }else {\n                cc.log(\"load config = \", JSON.stringify(result));\n\n                let config = result[\"level_1\"];\n                let waves = config[\"waves\"];\n                this.config = config;\n                this.wavesConfig = waves;\n                this.currentWaveConfig = waves[this.currentWaveCount];\n            }\n        });\n    },\n\n    addWave: function() {\n\n    },\n\n    addEnemy: function (type){\n\n        cc.log (\"add type == \" + type);\n        let enenmy = cc.instantiate(this.enemyPrefab);\n        enenmy.getComponent(\"enemy\").initWithData(type, this.enemyPathNodes);\n        enenmy.parent = this.node;\n\n        this.enemyNodeList.push(enenmy);\n    },\n\n    addBullet: function(tower, position) {\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.position = tower.position;\n        bullet.parent = this.node;\n        bullet.getComponent(\"bullet\").initWithData(tower, position, this.enemyNodeList);\n    },\n\n    update: function (dt){\n\n        if(this.currentWaveConfig){\n\n            if(this.addEnemyTime > this.currentWaveConfig.dt){\n\n                this.addEnemyTime = 0;\n                this.enemyCount ++;\n                this.addEnemy(this.currentWaveConfig.type);\n\n                if (this.enemyCount >= this.currentWaveConfig.count) {\n                    this.currentWaveConfig = undefined;\n                    this.enemyCount = 0;\n                }; \n            }\n            else {\n                this.addEnemyTime += dt;\n            }\n        }\n        else {\n            if (this.config) {\n                if (this.addWaveCurrentTime > this.config.dt) {\n\n                this.currentWaveConfig = this.wavesConfig[this.currentWaveCount];\n                if (this.currentWaveCount < this.wavesConfig.length ) {\n                    this.currentWaveCount ++;\n                }else {\n                    this.currentWaveConfig = undefined;\n                };\n\n                this.addWaveCurrentTime = 0;\n            }else{\n\n                this.addWaveCurrentTime += dt;\n            };\n            };\n\n            for(let i=0; i<this.towerPosNodes.length; i++){\n                let tower = this.towerPosNodes[i].tower;\n\n                if (tower != undefined) {\n\n                    for(let j=0; j < this.enemyNodeList.length; j++){\n                        let enemy = this.enemyNodeList[j];\n\n                        if (enemy.getComponent(\"enemy\").isLiving) {\n                            // let distance = cc.pDistance(tower);\n                            tower.getComponent(\"tower\").setEnemy(enemy);\n                        };\n                    }\n                };\n            }\n            \n        }\n    }\n\n});\n\n\n\n\n\n\n\n"]}