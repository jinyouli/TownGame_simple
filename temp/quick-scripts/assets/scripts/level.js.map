{"version":3,"sources":["level.js"],"names":["TowerNodeState","Invalid","Null","BuildMenu","Tower","UpdateMenu","cc","Class","extends","Component","properties","enemyPathNodes","default","type","Node","towerPosNodes","buildTowerPrefab","Prefab","towerPrefab","updateTowerPrefab","onLoad","i","length","node","setState","setTouchEvent","global","event","on","buildTower","bind","updateTower","sellTower","gameStart","currentWaveCount","enemyCount","addEnemyTime","addWaveCurrentTime","EventType","TOUCH_START","log","target","name","state","showBuildMenu","showUpdateMenu","closeMenu","menu","instantiate","parent","position","destroy","data","tower","onDestory","off","getComponent","loader","loadRes","err","result","JSON","stringify","config","waves","wavesConfig","currentWaveConfig","addWave","addEnemy","update","dt","count","undefined"],"mappings":"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","file":"level.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import global from '../global'\n\nconst TowerNodeState = {\n    Invalid : -1,\n    Null : 1,\n    BuildMenu : 2,\n    Tower : 3,\n    UpdateMenu : 4\n};\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        enemyPathNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        towerPosNodes: {\n            default : [],\n            type : cc.Node\n        },\n\n        buildTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        },\n\n        towerPrefab: {\n            default: [],\n            type : cc.Prefab\n        },\n\n        updateTowerPrefab: {\n            default: null,\n            type : cc.Prefab\n        }\n\n    },\n\n    onLoad: function() {\n        for(let i=0; i < this.towerPosNodes.length; i++){\n            let node = this.towerPosNodes[i];\n            this.setState(node,TowerNodeState.Null);\n            this.setTouchEvent(node);\n        }\n\n        global.event.on(\"build_tower\",this.buildTower.bind(this));\n        global.event.on(\"update_tower\",this.updateTower.bind(this));\n        global.event.on(\"sell_tower\",this.sellTower.bind(this));\n        global.event.on(\"game_start\",this.gameStart.bind(this));\n\n        this.currentWaveCount = 0;\n        this.enemyCount = 0;\n        this.addEnemyTime = 0;\n        this.addWaveCurrentTime = 0;\n    },\n\n    setTouchEvent: function(node){\n\n        node.on(cc.Node.EventType.TOUCH_START, function (event) {\n            cc.log(\"touch node name == \" + event.target.name);\n\n            if(node.state == TowerNodeState.Null){\n                this.showBuildMenu(event.target);\n            }\n            else if(node.state == TowerNodeState.Tower){\n                this.showUpdateMenu(event.target);\n            }\n            \n        }, this);\n    },\n\n    showBuildMenu: function (node){\n\n        this.closeMenu();\n\n        if (node.state == TowerNodeState.Null) {\n            let menu = cc.instantiate(this.buildTowerPrefab);\n            menu.parent = this.node;\n            menu.position = node.position;\n            this.setState(node, TowerNodeState.BuildMenu);\n            node.menu = menu;\n        };\n    },\n\n    showUpdateMenu: function(node){\n        this.closeMenu();\n        let menu = cc.instantiate(this.updateTowerPrefab);\n        menu.parent = this.node;\n        menu.position = node.position;\n        this.setState(node, TowerNodeState.UpdateMenu);\n        node.menu = menu;\n\n    },\n\n    closeMenu: function (){\n        for (let i = 0; i < this.towerPosNodes.length ; i++){\n            let node = this.towerPosNodes[i];\n            if (node.state == TowerNodeState.BuildMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Null);\n                return node;\n            }\n            else if (node.state == TowerNodeState.UpdateMenu) {\n                node.menu.destroy();\n                this.setState(node,TowerNodeState.Tower);\n                return node;\n            };\n        }\n    },\n\n    setState: function (node, state){\n        if(node.state == state){\n            return;\n        }\n\n        switch (state){\n            case TowerNodeState.Null:\n                break;\n            case TowerNodeState.BuildMenu:\n                break;\n            default:\n                break;\n        }\n        node.state = state;\n    },\n\n    buildTower: function(data){\n        cc.log(\"build tower \" + data);\n        let node = this.closeMenu();\n        let tower = cc.instantiate(this.towerPrefab[data]);\n        tower.parent = this.node;\n        tower.position = node.position;\n        this.setState(node,TowerNodeState.Tower);\n        node.tower = tower;\n    },\n\n    onDestory: function(){\n        global.event.off(\"build_tower\", this.buildTower);\n    },\n\n    updateTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").updateTower();\n    },\n\n    sellTower: function(){\n        let node = this.closeMenu();\n        node.tower.getComponent(\"tower\").sellTower();\n        this.setState(node,TowerNodeState.Null);\n    },\n\n    gameStart: function(){ \n        cc.loader.loadRes (\"./level_config\", (err, result) => {\n            if(err){\n                cc.log(\"load err = \" + err);\n            }else {\n                cc.log(\"load config = \", JSON.stringify(result));\n            }\n\n            let config = result[\"level_1\"];\n            let waves = config[\"waves\"];\n            this.config = config;\n            this.wavesConfig = waves;\n            this.currentWaveConfig = waves[this.currentWaveCount];\n\n        });\n    },\n\n    addWave: function() {\n\n    },\n\n    addEnemy: function (){\n        cc.log(\"add Enemy == \" + this.currentWaveCount);\n    },\n\n    update: function (dt){\n\n        if(this.currentWaveConfig){\n\n            if(this.addEnemyTime > this.currentWaveConfig.dt){\n\n                this.addEnemyTime = 0;\n                this.enemyCount ++;\n                this.addEnemy();\n\n                if (this.enemyCount >= this.currentWaveConfig.count) {\n                    this.currentWaveConfig = undefined;\n                    this.enemyCount = 0;\n                }; \n            }\n            else {\n                this.addEnemyTime += dt;\n            }\n        }\n        else {\n\n            if (this.addWaveCurrentTime > this.config.dt) {\n\n                this.currentWaveConfig = this.wavesConfig[this.currentWaveCount];\n                if (this.currentWaveCount < this.wavesConfig.length ) {\n                    this.currentWaveCount ++;\n                }else {\n                    this.currentWaveConfig = undefined;\n                };\n\n                this.addWaveCurrentTime = 0;\n            }else{\n\n                this.addWaveCurrentTime += dt;\n            };\n        }\n    }\n\n});\n\n\n\n\n\n\n\n"]}